#!/usr/bin/env node
/* -*- Mode: js2; js2-basic-offset: 2; indent-tabs-mode: nil; -*- */

/**
 * persona test user generator
 *
 * API:
 *
 *   /test_user
 *     Create a test user account with an IdP
 *     Returns JSON: {email: <account email>,
 *                    pass: <account password>,
 *                    expires: <expiration date>}
 *
 *   /assertion/:email/:pass/:audience
 *     Create an assertion for the user with the audience
 *     XXX Not yet implemented
 *
 */

const express = require('express'),
      path = require('path'),
      socket_io = require('socket.io'),
      API = require('../lib/api');

var api = new API();
var app = module.exports = express.createServer();

const allowedEnvs = ['prod','stage','dev'];

var io = socket_io.listen(app);
io.set('log level', 1);

// Configuration

app.configure(function(){
  app.set('views', path.join(__dirname, '..', 'views'));
  app.set('view engine', 'jade');
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(path.join(__dirname, '..', '..', 'static')));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

// middleware

function verifyEnv(req, res, next) {
  var serverEnv = req.param('env', 'prod');
  if (allowedEnvs.indexOf(serverEnv) === -1) {
    res.writeHead(400);
    return res.end("env must be one of " + allowedEnvs.join(', '));
  } else {
    // XXX apparently this assignment doens't work
    req.param['env'] = serverEnv;
    next();
  }
}

// Routes

app.get('/', function(req, res) {
  res.render('index');
});

app.get('/email/verified/:env?', verifyEnv, function getVerifiedEmail(req, res) {
  api.getVerifiedEmail(req.param('env', 'prod'), function(err, data) {
    if (err) {
      res.writeHead(500);
      return res.end();
    }
    res.contentType('json');
    return res.end(JSON.stringify(data));
  });
});

app.get('/email/unverified/:env?', verifyEnv, function getUnverifiedEmail(req, res) {
  api.getUnverifiedEmail(req.param('env', 'prod'), function(err, data) {
    if (err) {
      res.writeHead(500);
      return res.end();
    }
    res.contentType('json');
    return res.end(JSON.stringify(data));
  });
});

app.get('/assertion/:audience/email/:email/password/:password/:env?', verifyEnv, function getAssertion(rea, res) {
  return res.end('stub');
});

app.get('/assertion/:audience/:env?', verifyEnv, function getEmailAndAssertion(req, res) {
  api.getVerifiedEmail(req.param('env'), function(err, data) {
    if (err || !data) {
      res.writeHead(500);
      return res.end();
    }
    api.getAssertion(data, req.param('audience'), function(err, assertion) {
      if (err || !assertion) {
        res.writeHead(500);
        return res.end();
      }
      res.contentType('json');
      return res.end(JSON.stringify({data:data, assertion:assertion}));
    });
  });
});

function _getAssertion(params, req, res) {
  api.getAssertion(params, function(err, assertion) {
    if (err) {
      res.writeHead(500);
      return res.end();
    }

    res.contentType('json');
    return res.end(JSON.stringify(assertion));
  });
}

app.get('/assertion/:email/:password/:audience', function getAssertion(req, res) {
  _getAssertion(req.params, req, res);
});

app.post('/user_and_assertion/:audience', function postGetAssertion(req, res) {
  _getAssertion(req.body, req, res);
});

// ----------------------------------------------------------------------
// socket.io interface

api.on('error', function(err) {
  io.sockets.emit('message', {'type': 'status', 'data': err});
  console.log("ERROR: app: " + err);
});
api.on('message', function(message) {
  console.log("app: " + message);
  // XXX should not broadcast all api messages - only per-socket
  // by api call
  io.sockets.emit('message', {'type': 'status', 'data': message});
});

io.on('connection', function(socket) {
  socket.on('message', function(data) {
    if (data.method) {
      var serverEnv = data.env ? data.env : 'prod';
      if (allowedEnvs.indexOf(serverEnv) === -1) {
        socket.json.send({err: "Unsupported env: " + data.env});
      } else {
        switch(data.method) {
          case 'getVerifiedEmail':
            api.getVerifiedEmail(serverEnv, function(err, user) {
              socket.json.send({err: err, type: "verifiedEmail", data: user});
            });
            break;
          case 'getUnverifiedEmail':
            api.getUnverifiedEmail(serverEnv, function(err, user) {
              socket.json.send({err: err, type: "unverifiedEmail", data: user});
            });
            break;
          default:
            socket.json.send({err: "Unsupported method"});
            break;
        }
      }
    }
  });
});

if (!module.parent) {
  var port = parseInt(process.env['PORT'] || '3000', 10);
  app.listen(port, function(){
    console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
  });
}
